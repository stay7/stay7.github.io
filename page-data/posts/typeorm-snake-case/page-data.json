{
    "componentChunkName": "component---src-components-template-post-tsx",
    "path": "/posts/typeorm-snake-case",
    "result": {"data":{"markdownRemark":{"html":"<p>NestJS가 <code class=\"language-text\">TypeORM</code>을 추천하기도하고, 이제 <code class=\"language-text\">Sequelize</code>와 <code class=\"language-text\">TypeORM</code> github star가 비슷할 정도로 <code class=\"language-text\">TypeORM</code>이 인기가 많아진 것 같아서 사용해보았다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/62214433/119697769-85d51d00-be8b-11eb-83e7-245119d537b7.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/62214433/119697748-7eae0f00-be8b-11eb-9d0b-a74eaf673701.png\" alt=\"image\"></p>\n<h2>문제</h2>\n<p>NestJS 어플리케이션과 Database의 naming convention이 서로 다르다.</p>\n<ul>\n<li>\n<p>타입스크립트 naming convention은 camel case.</p>\n</li>\n<li>\n<p>Database의 naming conevention은 snake case.</p>\n</li>\n</ul>\n<p><code class=\"language-text\">Sequelize</code>에서는 <code class=\"language-text\">{underscored: true}</code> 옵션으로 해결할 수 있었지만, <code class=\"language-text\">TypeORM</code>은 공식적으로 지원하는 것은 없었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Group</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  groupId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">CreateDateColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  createdAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">UpdateDateColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  updatedAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">DeleteDateColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  deletedAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">createdAt</code>과 같은 camel case를 database에는 snake case로 저장하고 싶다.</p>\n<h2>해결 방법</h2>\n<p><a href=\"https://github.com/tonivj5/typeorm-naming-strategies#readme\">typeorm-naming-strategies</a>를 사용하면 해결할 수 있다.</p>\n<p>프로젝트 루트에 <code class=\"language-text\">ormconfig.js</code>를 생성하고 기존의 database config를 모두 옮긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">//ormconfig.js</span>\n<span class=\"token keyword\">const</span> SnakeNamingStrategy <span class=\"token operator\">=</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'typeorm-naming-strategies'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>SnakeNamingStrategy<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'postgres'</span><span class=\"token punctuation\">,</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  port<span class=\"token operator\">:</span> <span class=\"token number\">5432</span><span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  database<span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n  entities<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./dist/**/*.entity{.ts,.js}'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n  namingStrategy<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnakeNamingStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">//app.module.ts</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"date":"2021.05.27","path":"typeorm-snake-case","subtitle":"TypeORM에 snake case 적용하기","title":"NestJS + TypeORM에 snake case 적용"}}},"pageContext":{"title":"NestJS + TypeORM에 snake case 적용"}},
    "staticQueryHashes": ["3649515864","4221460748"]}